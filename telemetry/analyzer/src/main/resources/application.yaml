spring:
  application:
    name: analyzer
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:6543/mydatabase}
    username: ${DATABASE_USERNAME:user}
    password: ${DATABASE_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
  sql:
    init:
      mode: always
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect

logging:
  level:
    ru.yandex.practicum.telemetry: TRACE
    org:
      springframework: ERROR
      apache.kafka: WARN

analyzer:
  kafka:
    consumers:
      hubs:
        properties:
          bootstrap.servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
          group.id: ${KAFKA_ANALYZER_GROUP_ID:telemetry-analyzer-hubs}
          client.id: ${KAFKA_ANALYZER_CLIENT_ID:telemetry.analyzer.hubs}
          auto.offset.reset: earliest
          key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
          value.deserializer: ru.yandex.practicum.kafka.deserializer.HubEventAvroDeserializer
        topics:
          hubs-events: ${KAFKA_TOPIC_HUBS_EVENTS:telemetry.hubs.v1}
      snapshots:
        properties:
          bootstrap.servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
          group.id: ${KAFKA_ANALYZER_GROUP_ID:telemetry-analyzer-snapshots}
          client.id: ${KAFKA_ANALYZER_CLIENT_ID:telemetry.analyzer.snapshots}
          auto.offset.reset: earliest
          key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
          value.deserializer: ru.yandex.practicum.kafka.deserializer.SensorsSnapshotAvroDeserializer
        topics:
          snapshots-events: ${KAFKA_TOPIC_SNAPSHOTS_EVENTS:telemetry.snapshots.v1}

grpc:
  client:
    hub-router:
      address: ${GRPC_HUB_ROUTER_ADDRESS:static://localhost:59090}
      enableKeepAlive: true
      keepAliveWithoutCalls: true
      negotiationType: plaintext